package com.petweb.sponge.post.mock.answer;

import com.petweb.sponge.post.domain.answer.Answer;
import com.petweb.sponge.post.repository.answer.AnswerRepository;
import com.petweb.sponge.trainer.domain.HistoryTest;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockAnswerRepository implements AnswerRepository {

    private final List<Answer> data = new CopyOnWriteArrayList<>();
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private static final int PAGE_SIZE = 10;

    @Override
    public Optional<Answer> findById(Long id) {
        return data.stream()
                .filter(answer -> answer.getId().equals(id))
                .findFirst();
    }

    @Override
    public List<Answer> findListByPostId(Long postId) {
        return data.stream()
                .filter(answer -> answer.getPostId().equals(postId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Answer> findListByTrainerId(Long trainerId, int page) {
        int offset = page * PAGE_SIZE; // 페이지당 데이터 개수를 기준으로 offset을 계산
        return data.stream()
                .filter(item -> item.getTrainerId().equals(trainerId))
                .skip(offset)
                .limit(PAGE_SIZE)
                .collect(Collectors.toList());
    }

    @Override
    public Answer save(Answer answer) {
        if (answer.getId() == null || answer.getId() == 0L) {
            Answer newAnswer = Answer.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .content(answer.getContent())
                    .createdAt(answer.getCreatedAt())
                    .modifiedAt(answer.getModifiedAt())
                    .postId(answer.getPostId())
                    .trainerId(answer.getTrainerId()).build();
            data.add(newAnswer);
            return newAnswer;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), answer.getId()));
            data.add(answer);
            return answer;
        }
    }

    @Override
    public void delete(Answer answer) {
        data.remove(answer);
    }
}
