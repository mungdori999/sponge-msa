package com.petweb.sponge.post.mock.answer;

import com.petweb.sponge.post.domain.answer.AdoptAnswer;
import com.petweb.sponge.post.repository.answer.AdoptAnswerRepository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockAdoptAnswerRepository implements AdoptAnswerRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<AdoptAnswer> data = new CopyOnWriteArrayList<>();

    @Override
    public Optional<AdoptAnswer> findByAnswerId(Long answerId) {
        return data.stream()
                .filter(adoptAnswer -> adoptAnswer.getAnswerId().equals(answerId))
                .findFirst();
    }

    @Override
    public List<AdoptAnswer> findListByTrainerId(Long trainerId) {
        return data.stream()
                .filter(adoptAnswer -> adoptAnswer.getTrainerId().equals(trainerId))
                .collect(Collectors.toList());
    }

    @Override
    public List<AdoptAnswer> findListByAnswerIdList(List<Long> answerIdList) {
        return data.stream()
                .filter(adoptAnswer -> answerIdList.contains(adoptAnswer.getAnswerId()))
                .collect(Collectors.toList());
    }

    @Override
    public AdoptAnswer save(AdoptAnswer adoptAnswer) {
        AdoptAnswer newAdoptAnswer = AdoptAnswer.builder()
                .id(autoGeneratedId.incrementAndGet())
                .userId(adoptAnswer.getUserId())
                .trainerId(adoptAnswer.getTrainerId())
                .answerId(adoptAnswer.getAnswerId())
                .build();
        data.add(newAdoptAnswer);
        return newAdoptAnswer;
    }

    @Override
    public void delete(AdoptAnswer adoptAnswer) {
        data.remove(adoptAnswer);
    }
}
