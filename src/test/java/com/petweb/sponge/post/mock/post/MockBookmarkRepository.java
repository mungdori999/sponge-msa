package com.petweb.sponge.post.mock.post;

import com.petweb.sponge.post.domain.post.Bookmark;
import com.petweb.sponge.post.repository.post.BookmarkRepository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockBookmarkRepository implements BookmarkRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Bookmark> data = new CopyOnWriteArrayList<>();

    private static final int PAGE_SIZE = 10; // 페이지당 항목 개수

    @Override
    public Optional<Bookmark> findBookmark(Long postId, Long loginId) {
        return data.stream()
                .filter(bookmark -> bookmark.getPostId().equals(postId) && bookmark.getUserId().equals(loginId))
                .findFirst();
    }

    @Override
    public List<Bookmark> findBookmarkList(Long loginId, int page) {
        int offset = page * PAGE_SIZE; // 시작 인덱스 계산
        return data.stream()
                .filter(bookmark -> bookmark.getUserId().equals(loginId)) // userId 필터링
                .skip(offset) // `offset`만큼 건너뛰기
                .limit(PAGE_SIZE) // `PAGE_SIZE`만큼 가져오기
                .collect(Collectors.toList()); // 리스트로 변환하여 반환
    }

    @Override
    public void save(Bookmark bookmark) {
        Bookmark newBookmark = Bookmark.builder()
                .id(autoGeneratedId.incrementAndGet())
                .postId(bookmark.getPostId())
                .userId(bookmark.getUserId())
                .createdAt(bookmark.getCreatedAt())
                .build();
        data.add(newBookmark);
    }

    @Override
    public void deleteByPostId(Long postId) {
        data.removeIf(bookmark -> bookmark.getPostId().equals(postId));
    }

    @Override
    public void delete(Bookmark bookmark) {
        data.remove(bookmark);
    }


}
