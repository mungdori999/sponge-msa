package com.petweb.sponge.post.mock.post;

import com.petweb.sponge.post.domain.post.PostLike;
import com.petweb.sponge.post.repository.post.PostLikeRepository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

public class MockPostLikeRepository implements PostLikeRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<PostLike> data = new CopyOnWriteArrayList<>();

    @Override
    public Optional<PostLike> findLike(Long postId, Long loginId) {
        return data.stream()
                .filter(postLike -> postLike.getPostId().equals(postId) && postLike.getUserId().equals(loginId))
                .findFirst();
    }

    @Override
    public void save(PostLike postLike) {
        PostLike newPostLike = PostLike.builder()
                .id(autoGeneratedId.incrementAndGet())
                .postId(postLike.getPostId())
                .userId(postLike.getUserId())
                .build();
        data.add(newPostLike);
    }

    @Override
    public void delete(PostLike postLike) {
        data.remove(postLike);
    }

    @Override
    public void deleteByPostId(Long postId) {
        data.removeIf(bookmark -> bookmark.getPostId().equals(postId));
    }

}
