package com.petweb.sponge.post.mock.post;

import com.petweb.sponge.post.domain.post.*;
import com.petweb.sponge.post.repository.post.PostRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockPostRepository implements PostRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> postData = new CopyOnWriteArrayList<>();

    private static final int PAGE_SIZE = 10; // 페이지당 항목 개수

    @Override
    public Optional<Post> findById(Long id) {
        return postData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<Post> findShortById(Long id) {
        return postData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Post> findListByUserId(Long userId, int page) {
        return postData.stream().filter(item -> item.getUserId().equals(userId)).collect(Collectors.toList());
    }

    @Override
    public List<Post> findListByPostIdList(List<Long> postIdList) {
        return postData.stream()
                .filter(item -> postIdList.contains(item.getId())) // postIdList에 포함된 ID만 필터링
                .collect(Collectors.toList()); // 결과를 리스트로 변환
    }

    @Override
    public List<Post> findByKeyword(String keyword, int page) {
        return postData.stream().filter(item->item.getPostContent().getTitle().contains(keyword)).collect(Collectors.toList());
    }

    @Override
    public List<Post> findListByCode(Long categoryCode, int page) {
        List<Post> postList = new ArrayList<>();
        for (Post post : postData) {
            for (PostCategory postCategory : post.getPostCategoryList()) {
                if (postCategory.getCategoryCode().equals(categoryCode)) {
                    postList.add(post);
                }
            }
        }
        return postList;
    }

    @Override
    public Post save(Post post) {
        AtomicLong postFileId = new AtomicLong(0);
        AtomicLong postCategoryId = new AtomicLong(0);
        AtomicLong tagId = new AtomicLong(0);

        List<PostFile> postFileList = post.getPostFileList().stream().map(postFile -> PostFile.builder()
                .id(postFileId.incrementAndGet())
                .fileUrl(postFile.getFileUrl()).build()).collect(Collectors.toList());

        List<PostCategory> postCategoryList = post.getPostCategoryList().stream().map(postCategory -> PostCategory.builder()
                .id(postCategoryId.incrementAndGet())
                .categoryCode(postCategory.getCategoryCode()).build()).collect(Collectors.toList());

        List<Tag> tagList = post.getTagList().stream().map(tag -> Tag.builder()
                .id(tagId.incrementAndGet())
                .hashtag(tag.getHashtag()).build()).collect(Collectors.toList());

        if (post.getId() == null || post.getId() == 0L) {
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .postContent(post.getPostContent())
                    .likeCount(post.getLikeCount())
                    .answerCount(post.getAnswerCount())
                    .userId(post.getUserId())
                    .petId(post.getPetId())
                    .postFileList(postFileList)
                    .tagList(tagList)
                    .postCategoryList(postCategoryList)
                    .build();
            postData.add(newPost);
            return newPost;
        } else {
            postData.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            postData.add(post);
            return post;
        }

    }

    @Override
    public void delete(Post post) {
        postData.removeIf(item->item.getId().equals(post.getId()));
    }

    @Override
    public void initPost(Long id) {

    }

}
