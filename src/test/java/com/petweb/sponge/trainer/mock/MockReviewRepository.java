package com.petweb.sponge.trainer.mock;

import com.petweb.sponge.trainer.domain.Review;
import com.petweb.sponge.trainer.repository.ReviewRepository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockReviewRepository implements ReviewRepository {

    private final List<Review> data = new CopyOnWriteArrayList<>();
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final static int PAGE_SIZE = 10;

    @Override
    public Optional<Review> findByUserId(Long loginId, Long trainerId) {
        return data.stream().filter(item -> item.getUserId().equals(loginId) && item.getTrainerId().equals(trainerId)).findAny();
    }

    @Override
    public List<Review> findListByTrainerId(Long trainerId, int page) {
        int offset = page * PAGE_SIZE; // 페이지당 데이터 개수를 기준으로 offset을 계산
        return data.stream()
                .filter(item -> item.getTrainerId().equals(trainerId))
                .skip(offset)
                .limit(PAGE_SIZE)
                .collect(Collectors.toList());
    }

    @Override
    public Review save(Review review) {
        Review newReview = Review.builder()
                .id(autoGeneratedId.incrementAndGet())
                .score(review.getScore())
                .content(review.getContent())
                .createdAt(review.getCreatedAt())
                .trainerId(1L)
                .userId(1L)
                .build();
        data.add(newReview);
        return newReview;
    }
}
