package com.petweb.sponge.trainer.mock;

import com.petweb.sponge.trainer.domain.History;
import com.petweb.sponge.trainer.domain.Trainer;
import com.petweb.sponge.trainer.domain.TrainerAddress;
import com.petweb.sponge.trainer.repository.TrainerRepository;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class MockTrainerRepository implements TrainerRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Trainer> trainerData = new CopyOnWriteArrayList<>();


    @Override
    public Optional<Trainer> findByEmail(String email) {
        return trainerData.stream().filter(item -> item.getEmail().equals(email)).findAny();
    }

    @Override
    public Optional<Trainer> findShortById(Long id) {
        return trainerData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Trainer> findShortByIdList(List<Long> trainerIdList) {
        return trainerData.stream()
                .filter(item -> trainerIdList.contains(item.getId()))
                .collect(Collectors.toList());
    }

    @Override
    public Optional<Trainer> findById(Long id) {
        return trainerData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Trainer save(Trainer trainer) {
        AtomicLong addressId = new AtomicLong(0);
        AtomicLong historyId = new AtomicLong(0);
        // TrainerAddress의 ID를 자동 증가시키면서 새로운 리스트 생성
        List<TrainerAddress> trainerAddressList = trainer.getTrainerAddressList().stream()
                .map(address -> TrainerAddress.builder()
                        .id(addressId.incrementAndGet()) // ID 자동 증가
                        .city(address.getCity())
                        .town(address.getTown())
                        .build())
                .collect(Collectors.toList());

        // History의 ID를 자동 증가시키면서 새로운 리스트 생성
        List<History> historyList = trainer.getHistoryList().stream()
                .map(history -> History.builder()
                        .id(historyId.incrementAndGet()) // ID 자동 증가
                        .title(history.getTitle())
                        .startDt(history.getStartDt())
                        .endDt(history.getEndDt())
                        .description(history.getDescription())
                        .build())
                .collect(Collectors.toList());
        if(trainer.getId()==null || trainer.getId() == 0) {

            Trainer newTrainer = Trainer.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(trainer.getEmail())
                    .name(trainer.getName())
                    .gender(trainer.getGender())
                    .phone(trainer.getPhone())
                    .profileImgUrl(trainer.getProfileImgUrl())
                    .content(trainer.getContent())
                    .years(trainer.getYears())
                    .createdAt(trainer.getCreatedAt())
                    .trainerAddressList(trainerAddressList)
                    .historyList(historyList)
                    .build();
            trainerData.add(newTrainer);

            return newTrainer;
        }
        else {
            trainerData.removeIf(item -> Objects.equals(item.getId(), trainer.getId()));
            trainerData.add(trainer);
            return trainer;
        }
    }

    @Override
    public void initTrainer(Long id) {

    }
}
